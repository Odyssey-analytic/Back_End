# Generated by Django 5.1.7 on 2025-05-22 06:45

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

Gameevent_Migration =  """
CREATE TABLE gameevent (
    id SERIAL,
    time TIMESTAMPTZ,
    client_id INTEGER REFERENCES analytics_client(id),
    session_id INTEGER REFERENCES analytics_session(id),
    product_id INTEGER REFERENCES analytics_product(id)
);
SELECT create_hypertable('gameevent', 'time', 'product_id', number_partitions => 32);
"""


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_first_login', models.BooleanField(default=True)),
                ('rb_username', models.CharField(max_length=300, unique=True)),
                ('rb_password', models.CharField(max_length=64)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(max_length=300, unique=True)),
                ('description', models.TextField(blank=True, max_length=500, null=True)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='thumbnails/')),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='analytics.product')),
                ('engine', models.TextField(max_length=300)),
                ('platform', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('android', 'Android'), ('pc', 'PC'), ('ios', 'IOS')], max_length=7), default=list, size=None)),
            ],
            bases=('analytics.product',),
        ),
        migrations.AddField(
            model_name='product',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Token',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('value', models.CharField(max_length=300, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('Product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tokens', to='analytics.product')),
            ],
        ),
        migrations.CreateModel(
            name='Queue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fullname', models.CharField(max_length=300)),
                ('name', models.CharField(max_length=300)),
                ('type', models.CharField(max_length=300)),
                ('token', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='queues', to='analytics.token')),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('token', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clients', to='analytics.token')),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(null=True)),
                ('platform', models.TextField(max_length=100)),
                ('duration', models.DurationField(editable=False, null=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='analytics.client')),
                ('token', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='analytics.token')),
            ],
            options={
                'constraints': [models.CheckConstraint(condition=models.Q(('start_time__lt', models.F('end_time'))), name='start_before_end')],
            },
        ),
        migrations.RunSQL(Gameevent_Migration, reverse_sql="DROP TABLE gameevent;"),
        migrations.CreateModel(
            name='GameEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
            ],
            options={
                'db_table': 'gameevent',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SessionEndEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_event', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='SessionStartEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform', models.TextField(max_length=100)),
                ('game_event', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='BussinessEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_event', models.IntegerField()),
                ('cartType', models.CharField(max_length=300)),
                ('itemType', models.CharField(max_length=300)),
                ('itemId', models.CharField(max_length=300)),
                ('amount', models.IntegerField()),
                ('currency', models.CharField(max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='ErrorEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_event', models.IntegerField()),
                ('message', models.TextField()),
                ('severity', models.CharField(choices=[('Info', 'Info'), ('Debug', 'Debug'), ('Warning', 'Warning'), ('Error', 'Error'), ('Critical', 'Critical')], max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='ProgeressionEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_event', models.IntegerField()),
                ('progressionStatus', models.CharField(max_length=300)),
                ('progression01', models.CharField(max_length=300)),
                ('progression02', models.CharField(max_length=300)),
                ('progression03', models.CharField(max_length=300)),
                ('value', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='QualityEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_event', models.IntegerField()),
                ('FPS', models.FloatField()),
                ('memoryUsage', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='ResourceEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_event', models.IntegerField()),
                ('flowType', models.CharField(max_length=300)),
                ('itemType', models.CharField(max_length=300)),
                ('itemId', models.CharField(max_length=300)),
                ('amount', models.IntegerField()),
                ('resourceCurrency', models.CharField(max_length=300)),
            ],
        ),
        
        
    ]
